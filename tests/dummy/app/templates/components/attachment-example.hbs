<centered class="section top-section">
  <p>Drop an <span class="no-wrap">\{{#attach-tooltip}}</span> or <span class="no-wrap">\{{#attach-popover}}</span> in any element or component to get started.</p>
</centered>
<centered class="section">
  <centered xs="24" lm="20" sm="16" md="12" lg="10" justify="around" class="popper-area">
    <button class="hover-me">
      Tooltip me, captain!

      {{#attach-tooltip animation=tooltipData.animation
                        arrow=tooltipData.arrow
                        hideDelay=tooltipData.hideDelay
                        hideDuration=tooltipData.hideDuration
                        hideOn=tooltipData.hideOn
                        interactive=tooltipData.interactive
                        isShown=tooltipData.isShown
                        onChange=(action (mut tooltipData.isShown))
                        placement=tooltipData.placement
                        registerAPI=(action 'log')
                        renderInPlace=tooltipData.renderInPlace
                        showDelay=tooltipData.showDelay
                        showDuration=tooltipData.showDuration
                        showOn=tooltipData.showOn}}
        Hello world!
      {{/attach-tooltip}}
    </button>

    <button class="hover-me">
      Click me, captain!

      {{#attach-popover animation=popoverData.animation
                        arrow=popoverData.arrow
                        class="ember-attacher-popper custom-popover-css"
                        hideDelay=popoverData.hideDelay
                        hideDuration=popoverData.hideDuration
                        hideOn=popoverData.hideOn
                        interactive=popoverData.interactive
                        isShown=popoverData.isShown
                        lazyRender=popoverData.lazyRender
                        onChange=(action (mut popoverData.isShown))
                        placement=popoverData.placement
                        registerAPI=(action 'log')
                        renderInPlace=popoverData.renderInPlace
                        showDelay=popoverData.showDelay
                        showDuration=popoverData.showDuration
                        showOn=popoverData.showOn as |emberAttacher|}}
        <p>Popovers and tooltips, oh my!</p>

        <button {{action emberAttacher.hide}}>Close</button>
      {{/attach-popover}}
    </button>
  </centered>
</centered>
{{#if (and service.arrow (eq service.animation "fill"))}}
  <centered class="section">
    <h2>Warning: `animation: "fill"` is not compatible with `arrow: true`</h2>
  </centered>
{{/if}}

{{#if service.renderInPlace}}
  <centered class="section" vertical fit>
    <h3>Note: renderInPlace can cause z-index issues.</h3>
    <h3>Hover over the renderInPlace attr for more details.</h3>
  </centered>
{{/if}}
<centered class="edit-section">
  <vbox lm="fit">
    <hbox class="nav-bar">
      <centered xs='12' class="nav{{if isConfiguringTooltip ' active'}}" {{action 'setIsConfiguringTooltip' true}}>
        \{{#attach-tooltip}}
      </centered>
      <centered xs='12' class="nav{{unless isConfiguringTooltip ' active'}}" {{action 'setIsConfiguringTooltip' false}}>
        \{{#attach-popover}}
      </centered>
    </hbox>

  <vbox class="edit-me">
    <hbox><centered fit>&lt;button class="hover-me"></centered></hbox>
    <hbox>
      <centered fit>
        &nbsp;&nbsp;
        {{if isConfiguringTooltip 'Tooltip me, captain!' 'Click me, captain!'}}
      </centered>
    </hbox>
    <hbox>&nbsp;</hbox>
    <box lm="horizontal" fit>
      <hbox fit class="no-wrap">
        <centered fit>
          &nbsp;&nbsp;\{{
          <span class="underlined">
            {{if isConfiguringTooltip '#attach-tooltip' '#attach-popover'}}

            {{#attach-tooltip animation='shift'}}
              {{#if isConfiguringTooltip}}
                This component has the default settings. The \{{attach-tooltip}} component
                automatically gains the ember-attacher-popper and ember-attacher-tooltip classes.
                It also modifies the target element's aria-describedby to point to the tooltip.
                For manual control, use \{{attach-popover}} instead.
              {{else}}
                This is a click-triggered \{{attach-popover}}. Unlike \{{attach-tooltip}}, it does
                not modify the target's aria-describedby, or have any default classes.
              {{/if}}
            {{/attach-tooltip}}
          </span>
          &nbsp;
        </centered>
      </hbox>
      <hbox fit>
        <box xs="fit" lm="hidden">&nbsp;&nbsp;&nbsp;&nbsp;</box>
        <centered fit>
          animation="{{#power-select onchange=(action (mut service.animation))
                                     options=animationOptions
                                     searchEnabled=false
                                     selected=service.animation
                                     triggerClass="button large"
                                     as |animationOption|}}
                                       {{animationOption}}
                                     {{/power-select}}"
        </centered>
      </hbox>
    </box>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        arrow=<button class="button medium" {{action "toggleArrow"}}>{{service.arrow}}</button>
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        hideDelay={{input class="button medium"
                          min="0"
                          pattern="[0-9]"
                          placeholder="0"
                          step="100"
                          type="number"
                          value=service.hideDelay}}
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          hideDuration

          {{#attach-tooltip}}
            How long the hide animation will take.
          {{/attach-tooltip}}
        </span>
        ={{input class="button medium"
                 min="0"
                 pattern="[0-9]"
                 placeholder="0"
                 step="100"
                 type="number"
                 value=service.hideDuration}}
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          hideOn

          {{#attach-tooltip animation='shift'}}
            Any combination of "blur", "click", "clickout", "escapekey", and "mouseleave".
            <p>clickout: hides the attachment when the user clicks outside the target. When interactive=true, clicking the attachment will not trigger a hide event.</p>
            <p>escapekey: hides the attachment when the user presses the escape key</p>
          {{/attach-tooltip}}
        </span>
        ="{{#power-select onchange=(action (mut service.hideOn))
                          options=hideOnOptions
                          searchEnabled=false
                          selected=service.hideOn
                          triggerClass="button xlarge"
                          as |hideOnOption|}}
                            {{hideOnOption}}
                          {{/power-select}}"
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          interactive

          {{#attach-tooltip}}
            Interactive tooltips will not close when clicked or hovered over.
          {{/attach-tooltip}}
        </span>
        =
        <button class="button medium" {{action "toggleInteractive"}}>
          {{service.interactive}}
        </button>
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          isShown

          {{#attach-tooltip}}
            Manually controls whether or not the attacher should be open or closed.
          {{/attach-tooltip}}
        </span>
        =
        <button class="button medium" {{action "toggleIsShown"}}>{{service.isShown}}</button>
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;
      <box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          lazyRender

          {{#attach-tooltip}}
            If you want ember-attacher to postpone rendering until first interacted.
          {{/attach-tooltip}}
        </span>
        =
        <button class="button medium" {{action "toggleLazyRender"}}>{{service.lazyRender}}</button>
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          onChange

          {{#attach-tooltip}}
            An action to be fired when the attachment's visibility changes.
          {{/attach-tooltip}}
        </span>
        =(action (mut isShown))
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        placement="{{#power-select onchange=(action (mut service.placement))
                                   options=placementOptions
                                   searchEnabled=false
                                   selected=service.placement
                                   triggerClass="button large"
                                   as |placementOption|}}
                                     {{placementOption}}
                                   {{/power-select}}"
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          registerAPI

          {{#attach-tooltip animation='shift'}}
            <p>RegisterAPI allows you to pass an action that will be called once the attachment has
            been positioned, and any time the Popper.js instance must be recreated (from changing
            options on the attachment).</p>
            <p>RegisterAPI allows you to capture the element used for positioning,
            the parent element, and various functions related to positioning, such as scheduleUpdate
            and disableEventListeners. See the readme for a full description of RegisterAPI.</p>
          {{/attach-tooltip}}
        </span>
        =(action (mut log))
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          renderInPlace

          {{#attach-tooltip animation="shift"}}
            Elements that exist deep within the document tree are given an implicitly lower z-index
            value than elements that aren't as deep in the tree; this has the effect of hiding our
            popper behind less-nested elements. Due to the way z-indexing works, we cannot simply
            add a higher z-index value to our popper. To avoid this issue, we render the element
            on the document body, giving it the highest default z-index value. Toggling
            renderInPlace will prevent the popper from being rendered elsewhere, but may cause the
            aforementioned z-index issues.
          {{/attach-tooltip}}
        </span>
        =
        <button class="button medium" {{action "toggleRenderInPlace"}}>
          {{service.renderInPlace}}
        </button>
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        showDelay={{input class="button medium"
                          min="0"
                          pattern="[0-9]"
                          placeholder="0"
                          step="100"
                          type="number"
                          value=service.showDelay}}
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          showDuration

          {{#attach-tooltip}}
            How long the show animation will take.
          {{/attach-tooltip}}
        </span>
        ={{input class="button medium"
                 min="0"
                 pattern="[0-9]"
                 placeholder="0"
                 step="100"
                 type="number"
                 value=service.showDuration}}
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <span class="underlined">
          showOn

          {{#attach-tooltip}}
            For performance reasons, we recommend using some combination of "mouseenter", "focus",
            and "click", though you can use any event listener you want.
          {{/attach-tooltip}}
        </span>
        ="{{#power-select onchange=(action (mut service.showOn))
                          options=showOnOptions
                          searchEnabled=false
                          selected=service.showOn
                          triggerClass="button xlarge"
                          as |showOnOption|}}
                            {{showOnOption}}
                          {{/power-select}}"
      </centered>
    </hbox>
    <hbox>
      &nbsp;&nbsp;&nbsp;&nbsp;<box xs="hidden" lm="visible fit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</box>
      <centered fit>
        <vbox>
          {{#if isConfiguringTooltip}}
            <hbox>
              <centered fit>
                <span class="underlined">
                  class

                  {{#attach-tooltip}}
                    The \{{attach-tooltip}} component automatically adds
                    ember-attacher-popper and ember-attacher-tooltip to the class string.
                  {{/attach-tooltip}}
                </span>
                ='optional-class-here'}}
              </centered>
            </hbox>
          {{else}}
            <hbox><centered fit>class="ember-attacher-popper custom-popover-css"</centered></hbox>
            <hbox><centered fit>as |attacher|}}</centered></hbox>
          {{/if}}
        </vbox>
      </centered>
    </hbox>
    {{#if isConfiguringTooltip}}
      <hbox>&nbsp;&nbsp;&nbsp;&nbsp;Hello world!</hbox>
    {{else}}
      <vbox>
        <hbox fit><centered fit>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p></centered></hbox>
        <hbox fit><centered fit>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Popovers and tooltips, oh my!
        </centered></hbox>
        <hbox fit><centered fit>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p></centered></hbox>
        <hbox>
          &nbsp;&nbsp;&nbsp;&nbsp;
          <centered fit>
            &lt;button \{{action attacher.hide}}>
          </centered>
        </hbox>
        <hbox>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <centered fit>
            Close
          </centered>
        </hbox>
        <hbox>
          &nbsp;&nbsp;&nbsp;&nbsp;
          <centered fit>
            &lt;\button>
          </centered>
        </hbox>
      </vbox>
    {{/if}}
    <hbox>
      &nbsp;&nbsp;\{{/{{if isConfiguringTooltip 'attach-tooltip}}' 'attach-popover}}'}}
    </hbox>
    <hbox>
      <centered fit>&lt;\button></centered>
    </hbox>
  </vbox>
  </vbox>
</centered>
<vbox align="center" class="section">
  <h2>Credits</h2>
  <vbox fit xs="24" lm="20" sm="16" md="12">
    <p>Ember-attacher was inspired by tippy.js and ember-tooltips.</p>
    <p>It was built with love to provide a tooltip and popover addon based on popper.js, a modern replacement to tether.js, while taking advantage of everything Ember.js has to offer.</p>
  </vbox>
</vbox>
